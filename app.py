import streamlit as st
import requests
import geopandas as gpd
import pandas as pd

# Title of the web app
st.title('Grid Data Retrieval and Download')

# Instructions
st.write('Select a power plant service to retrieve data and download as GeoJSON:')

# List of services from which to scrape data
services = [
    "Battery_Storage_Plants",
    "Biomass_Plants_Testing_view",
    "Coal_Power_Plants",
    "ElectricPowerPlants",
    "Hydro_Pumped_Storage_Power_Plants",
    "Hydroelectric_Power_Plants",
    "Natural_Gas_Power_Plants",
    "Nuclear_Power_Plants",
    "Petroleum_Power_Plants",
    "Solar_Power_Plants",
    "Wind_Power_Plants"
]

# Dropdown menu for the user to select a service
service_name = st.selectbox('Select Service', services)

# Base URL and parameters for requests
base_url = "https://services7.arcgis.com/FGr1D95XCGALKXqM/arcgis/rest/services/{}/FeatureServer/0/query"
params = {
    "f": "geojson",
    "maxRecordCountFactor": "4",
    "resultOffset": "0",
    "resultRecordCount": "8000",
    "where": "1=1",
    "orderByFields": "OBJECTID",
    "outFields": "*",
    "outSR": "4326",
    "spatialRel": "esriSpatialRelIntersects"
}

# Button to fetch and download data
if st.button('Fetch and Download Data'):
    # Update the URL with the current service name
    service_url = base_url.format(service_name)

    # Make the GET request to the service
    response = requests.get(service_url, params=params)

    if response.status_code == 200:
        # Load the GeoJSON directly into a GeoDataFrame
        gdf = gpd.GeoDataFrame.from_features(response.json(), crs='EPSG:4326')
        st.write(f"Data for {service_name} fetched successfully!")

        # Extract latitude and longitude from the 'geometry' column
        gdf['latitude'] = gdf.geometry.y
        gdf['longitude'] = gdf.geometry.x

        # Convert GeoDataFrame to DataFrame removing the geometry column for st.map
        df = pd.DataFrame(gdf.drop(columns='geometry'))

        # Display the map with data points
        st.map(df)

        # Save the GeoDataFrame to a GeoJSON file
        filename = f"{service_name}.geojson"
        gdf.to_file(filename, driver='GeoJSON')

        # Provide download link to the user
        with open(filename, "rb") as file:
            st.download_button(
                label="Download GeoJSON",
                data=file,
                file_name=filename,
                mime="application/geo+json"
            )
    else:
        st.error(f"Failed to retrieve data for service: {service_name}, Status Code: {response.status_code}")


# import streamlit as st
# import requests
# import geopandas as gpd
# import pandas as pd
# import pydeck as pdk

# # Title of the web app
# st.title('Grid Data Retrieval and Download')

# # Instructions
# st.write('Select a power plant service to retrieve data and download as GeoJSON:')

# # List of services from which to scrape data
# services = [
#     "Battery_Storage_Plants",
#     "Biomass_Plants_Testing_view",
#     "Coal_Power_Plants",
#     "ElectricPowerPlants",
#     "Hydro_Pumped_Storage_Power_Plants",
#     "Hydroelectric_Power_Plants",
#     "Natural_Gas_Power_Plants",
#     "Nuclear_Power_Plants",
#     "Petroleum_Power_Plants",
#     "Solar_Power_Plants",
#     "Wind_Power_Plants"
# ]

# # Dropdown menu for the user to select a service
# service_name = st.selectbox('Select Service', services)

# # Base URL and parameters for requests
# base_url = "https://services7.arcgis.com/FGr1D95XCGALKXqM/arcgis/rest/services/{}/FeatureServer/0/query"
# params = {
#     "f": "geojson",
#     "maxRecordCountFactor": "4",
#     "resultOffset": "0",
#     "resultRecordCount": "8000",
#     "where": "1=1",
#     "orderByFields": "OBJECTID",
#     "outFields": "*",
#     "outSR": "4326",
#     "spatialRel": "esriSpatialRelIntersects"
# }

# # Button to fetch and download data
# if st.button('Fetch and Download Data'):
#     # Update the URL with the current service name
#     service_url = base_url.format(service_name)

#     # Make the GET request to the service
#     response = requests.get(service_url, params=params)

#     if response.status_code == 200:
#         # Load the GeoJSON directly into a GeoDataFrame
#         gdf = gpd.GeoDataFrame.from_features(response.json(), crs='EPSG:4326')
#         st.write(f"Data for {service_name} fetched successfully!")

#         # Extract latitude and longitude
#         gdf['latitude'] = gdf.geometry.y
#         gdf['longitude'] = gdf.geometry.x

#         # Create a Pydeck layer
#         layer = pdk.Layer(
#             "ScatterplotLayer",
#             gdf,
#             get_position="[longitude, latitude]",
#             get_color="[200, 30, 0, 160]",
#             get_radius=100,
#             pickable=True
#         )

#         # Set the initial view
#         view_state = pdk.ViewState(latitude=gdf['latitude'].mean(), longitude=gdf['longitude'].mean(), zoom=8)

#         # Render Pydeck map
#         r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={"text": "{Plant_Name}"})
#         st.pydeck_chart(r)

#         # Save the GeoDataFrame to a GeoJSON file
#         filename = f"{service_name}.geojson"
#         gdf.to_file(filename, driver='GeoJSON')

#         # Provide download link to the user
#         with open(filename, "rb") as file:
#             st.download_button(
#                 label="Download GeoJSON",
#                 data=file,
#                 file_name=filename,
#                 mime="application/geo+json"
#             )
#     else:
#         st.error(f"Failed to retrieve data for service: {service_name}, Status Code: {response.status_code}")
